// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider     = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model User {
  id             String     @id @default(cuid())
  name           String?
  hashedPassword String
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  roleId         String     @default(cuid()) // Default role, dapat disesuaikan
  role           Role       @relation(fields: [roleId], references: [id])
  folders        Folder[]
  documents      Document[]
  projects       Project[]
  sessions       Session[]
  accounts       Account[]
  Authenticator  Authenticator[]
}

model Role {
  id    String @id @default(cuid())
  name  String
  code  String @unique
  users User[]
}

model Folder {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  name      String
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  isRoot    Boolean
  startDate DateTime   @default(now())
  endDate   DateTime   @default(now())
  documents Document[]
  project   Project?
}

model Document {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  url       String
  folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId  String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id       String @id @default(cuid())
  folderId String @unique
  folder   Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  auditors User[]
}
